# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS cmake.toml)
endif()

project(pdbgen2
	VERSION
		0.1.0
)

# Target: pdbgen2
set(CMKR_TARGET pdbgen2)
include(FetchContent)
set(FETCHCONTENT_QUIET FALSE)
option(LLVM_BUILD_TYPE "Build type for LLVM (Release or Debug)" Release)

# Define LLVM install directory
set(LLVM_INSTALL_DIR ${CMAKE_BINARY_DIR}/llvm-install)

# Check if LLVM is already installed
if(EXISTS ${LLVM_INSTALL_DIR})
    message(STATUS "LLVM is already installed in ${LLVM_INSTALL_DIR}, skipping build.")
else()
    message(STATUS "LLVM not found, proceeding with download and build...")

    # Fetch LLVM project
    FetchContent_Declare(
        llvm-project
        GIT_REPOSITORY https://github.com/llvm/llvm-project.git
        GIT_TAG llvmorg-20.1.0
        GIT_PROGRESS TRUE
    )
    FetchContent_MakeAvailable(llvm-project)

    # Set up LLVM build directory
    set(LLVM_BUILD_DIR ${CMAKE_BINARY_DIR}/llvm-build)
    message(STATUS "LLVM Build Directory: ${LLVM_BUILD_DIR}")
    message(STATUS "LLVM Install Directory: ${LLVM_INSTALL_DIR}")

    # Run CMake configuration for LLVM
    message(STATUS "Running CMake configuration for LLVM...")
    execute_process(
        COMMAND cmake -S ${llvm-project_SOURCE_DIR}/llvm -B ${LLVM_BUILD_DIR} 
            -DCMAKE_CONFIGURATION_TYPES=${LLVM_BUILD_TYPE}
            -DCMAKE_BUILD_TYPE=${LLVM_BUILD_TYPE}
            -DCMAKE_INSTALL_PREFIX=${LLVM_INSTALL_DIR} 
            -DLLVM_TARGETS_TO_BUILD=X86
            -DLLVM_ENABLE_PROJECTS=clang
            -DLLVM_BUILD_LLVM_C_DYLIB=OFF
            -DLLVM_BUILD_RUNTIME=OFF
            -DLLVM_BUILD_RUNTIMES=OFF
            -DLLVM_BUILD_TOOLS=OFF
            -DLLVM_BUILD_UTILS=OFF
            -DLLVM_ENABLE_BACKTRACES=OFF
            -DLLVM_ENABLE_BINDINGS=OFF
            -DLLVM_ENABLE_CRASH_OVERRIDES=OFF
            -DLLVM_ENABLE_OCAMLDOC=OFF
            -DLLVM_ENABLE_PDB=ON
            -DLLVM_INCLUDE_BENCHMARKS=OFF
            -DLLVM_INCLUDE_DOCS=OFF
            -DLLVM_INCLUDE_EXAMPLES=OFF
            -DLLVM_INCLUDE_GO_TESTS=OFF
            -DLLVM_INCLUDE_RUNTIMES=OFF
            -DLLVM_INCLUDE_TESTS=OFF
            -DLLVM_INCLUDE_TOOLS=OFF
            -DLLVM_INCLUDE_UTILS=OFF
            RESULT_VARIABLE config_result
            OUTPUT_VARIABLE config_output
            ERROR_VARIABLE config_error
    )

    if(config_result)
        message(FATAL_ERROR "LLVM configuration failed: ${config_error}")
    else()
        message(STATUS "LLVM configured successfully.")
    endif()

    # Build LLVM
    message(STATUS "Starting LLVM build process...")
    execute_process(
        COMMAND cmake --build ${LLVM_BUILD_DIR} --config ${LLVM_BUILD_TYPE} -j24
        RESULT_VARIABLE build_result
        OUTPUT_VARIABLE build_output
        ERROR_VARIABLE build_error
    )

    if(build_result)
        message(FATAL_ERROR "LLVM build failed: ${build_error}")
    else()
        message(STATUS "LLVM built successfully.")
    endif()

    # Install LLVM
    message(STATUS "Installing LLVM to ${LLVM_INSTALL_DIR}...")
    execute_process(
        COMMAND cmake --install ${LLVM_BUILD_DIR}
        RESULT_VARIABLE install_result
        OUTPUT_VARIABLE install_output
        ERROR_VARIABLE install_error
    )

    if(install_result)
        message(FATAL_ERROR "LLVM install failed: ${install_error}")
    else()
        message(STATUS "LLVM installed successfully.")
    endif()

    message(STATUS "LLVM setup complete.")
endif()

set(pdbgen2_SOURCES
	cmake.toml
	"include/utils.h"
	"src/main.cpp"
	"src/utils.cpp"
)

add_executable(pdbgen2)

target_sources(pdbgen2 PRIVATE ${pdbgen2_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${pdbgen2_SOURCES})

target_compile_features(pdbgen2 PRIVATE
	cxx_std_17
)

target_include_directories(pdbgen2 PRIVATE
	include
)

target_link_libraries(pdbgen2 PRIVATE
	LLVMBinaryFormat
	LLVMDebugInfoCodeView
	LLVMDebugInfoMSF
	LLVMDebugInfoPDB
	LLVMObject
	LLVMObjectYAML
	LLVMSupport
	LLVMIRReader
	LLVMBitReader
	LLVMAsmParser
	LLVMCore
	LLVMRemarks
	LLVMBitstreamReader
	LLVMMCParser
	LLVMTextAPI
	LLVMMC
	LLVMTargetParser
	LLVMDemangle
	Ws2_32
	ntdll
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT pdbgen2)
endif()

target_link_directories(pdbgen2 PRIVATE ${LLVM_INSTALL_DIR}/lib)
target_include_directories(pdbgen2 PRIVATE ${LLVM_INSTALL_DIR}/include)
